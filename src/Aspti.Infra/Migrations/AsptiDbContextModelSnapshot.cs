// <auto-generated />
using System;
using Aspti.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aspti.Infra.Data.Migrations
{
    [DbContext(typeof(AsptiDbContext))]
    partial class AsptiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aspti.Domain.Entidades.CategoriaTela", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(99);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(98);

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CategoriaTela", "Sistema");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CEP")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("CidadeCodigoIBGE")
                        .HasColumnType("text");

                    b.Property<string>("CidadeNome")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(99);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(98);

                    b.Property<string>("EstadoNome")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Numero")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Endereco", "Sistema");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.Perfil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Administrador")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Perfil", "Identidade");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.PerfilPermissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("PerfilPermissao", "Identidade");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.Tela", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriaTelaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(99);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(98);

                    b.Property<string>("Icone")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaTelaId");

                    b.ToTable("Tela", "Sistema");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("CPFCNPJ")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("EnderecoId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Sobrenome")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Usuario", "Identidade");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.UsuarioLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioLogin", "Identidade");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.UsuarioPerfil", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioPerfil", "Identidade");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.UsuarioPermissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioPermissao", "Identidade");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.UsuarioToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsuarioToken", "Identidade");
                });

            modelBuilder.Entity("Aspti.Infra.CrossCutting.LogAudit.Model.Auditoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAuditoria")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdEntidade")
                        .HasColumnType("text");

                    b.Property<string>("NomeEntidade")
                        .HasColumnType("text");

                    b.Property<string>("NomeTabela")
                        .HasColumnType("text");

                    b.Property<int>("TipoAuditoria")
                        .HasColumnType("integer");

                    b.Property<string>("Usuario")
                        .HasColumnType("text");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Auditoria", "Sistema");
                });

            modelBuilder.Entity("Aspti.Infra.CrossCutting.LogAudit.Model.AuditoriaPropriedade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuditoriaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ChavePrimaria")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeDaPropriedade")
                        .HasColumnType("text");

                    b.Property<string>("ValorAntigo")
                        .HasColumnType("text");

                    b.Property<string>("ValorNovo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriaId");

                    b.ToTable("AuditoriaPropriedade", "Sistema");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.PerfilPermissao", b =>
                {
                    b.HasOne("Aspti.Domain.Entidades.Perfil", "Perfil")
                        .WithMany("Permissoes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.Tela", b =>
                {
                    b.HasOne("Aspti.Domain.Entidades.CategoriaTela", "CategoriaTela")
                        .WithMany("Telas")
                        .HasForeignKey("CategoriaTelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaTela");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.Usuario", b =>
                {
                    b.HasOne("Aspti.Domain.Entidades.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.UsuarioLogin", b =>
                {
                    b.HasOne("Aspti.Domain.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.UsuarioPerfil", b =>
                {
                    b.HasOne("Aspti.Domain.Entidades.Perfil", "Perfil")
                        .WithMany("PerfilUsuarios")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aspti.Domain.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aspti.Domain.Entidades.Usuario", null)
                        .WithMany("UsuarioPerfis")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.UsuarioPermissao", b =>
                {
                    b.HasOne("Aspti.Domain.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.UsuarioToken", b =>
                {
                    b.HasOne("Aspti.Domain.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aspti.Infra.CrossCutting.LogAudit.Model.AuditoriaPropriedade", b =>
                {
                    b.HasOne("Aspti.Infra.CrossCutting.LogAudit.Model.Auditoria", "Auditoria")
                        .WithMany("Propriedades")
                        .HasForeignKey("AuditoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditoria");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.CategoriaTela", b =>
                {
                    b.Navigation("Telas");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.Perfil", b =>
                {
                    b.Navigation("PerfilUsuarios");

                    b.Navigation("Permissoes");
                });

            modelBuilder.Entity("Aspti.Domain.Entidades.Usuario", b =>
                {
                    b.Navigation("UsuarioPerfis");
                });

            modelBuilder.Entity("Aspti.Infra.CrossCutting.LogAudit.Model.Auditoria", b =>
                {
                    b.Navigation("Propriedades");
                });
#pragma warning restore 612, 618
        }
    }
}
